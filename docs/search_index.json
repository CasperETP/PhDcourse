[["index.html", "The data-wrangling and omics course for R novices Chapter 1 Welcome to this course", " The data-wrangling and omics course for R novices Casper-Emil Tingskov Pedersen and Jonathan Thorsen 2023-10-30 Chapter 1 Welcome to this course This course will introduce you to data-wrangling and analysis of omics data. We start out by building an intuition for working with data in R/Rstudio and then plot our results. The best way to learn is to follow along with your own laptop, but all are welcome. The idea with this course is also that you can do your own selv-paced learning by going back to themes that are harder. We’ll spend half the time with the lectures on the basic of R and data wrangling and half the time for you to try out wrangling yourself. You can also try some of the things you learn from the exercises on your own data. Before you begin, be sure you are all set up: see the prerequisites in #overview. Breakdown for the course: Course schedule: Time Day1 Day2 9-10:30 Data-Wrangling, an introduction Modelling introduction and omics 10:35-12 Get your hands dirty with data-wrangling Your own catwalk with omics 13-14.30 GGplot2, an introduction Machine learning introduction 14.35-16 Plotting visually please plots Omics and machine learning This work is licensed under a Creative Commons Attribution 4.0 International License. "],["overview.html", "Chapter 2 Course overview 2.1 What can you expect 2.2 General learning outcomes 2.3 Our workflow plus the Tidy data workflow 2.4 Working with data that is not your own 2.5 Goals of this course 2.6 Prerequisites 2.7 Credit", " Chapter 2 Course overview Yihaa you are commited to learning relevant coding using R. The world is now ready to become your oister. 2.1 What can you expect In this course you will learn how to code in R and it will be fun. You will learn efficient code and workflows that can be used in your own research and for various kinds of data, including all types of omics data. This is really powerful and will lead you to become a better scientist. 2.2 General learning outcomes -how to code in R. -how to THINK about data. -how to think about data separately from your research questions. -how and why to tidy data and analyze tidy data. -how to increase efficiency in your research. 2.3 Our workflow plus the Tidy data workflow We will turning our data tidy and how to use a tidyverse suite of tools to work with tidy data. It has been developed by Hadley Wickham and his team, please visit his website if you are interested in learning more. We will be focusing on a combination of tools: Basic tools: -str/glimpse: Look at data Tidytools: -Tidy: tidyr to organize rows of data into unique values. -Transform: dplyr to manipulate/wrangle data based on subsetting by rows or columns, sorting and joining. -Visualize: ggplot2 static plots, using grammar of graphics principles This is essential - Instead of building your analyses around the format your data are in, take deliberate steps to make your data tidy. When your data are tidy, you can use a growing suite of powerful analytical and visualization tools instead of inventing home-grown ways to accommodate your data. This will save you time since you aren’t reinventing the wheel, and will make your work more clear and understandable to your collaborators (most importantly, Future You). 2.4 Working with data that is not your own One of the most important things you will learn is how to think about data separately from your own research context. Said in another way, you’ll learn to distinguish your data questions from your research questions. Here, we are focusing on data questions, and we will use data that is not specific to your research. We will be using several different data sets throughout this training, and will help you see the patterns and parallels to your own data, which will ultimately help you in your research. 2.5 Goals of this course The goal of this course today is to equip you with the tools to take a (your) dataset and do the following: Import data to R and understand the structure of your data Look at it using summaries and descriptive statistics Engineer features relevant for your research Impute missing data To do transformation and understand what that means Plot the data using visually appealing and publish-ready figures 2.6 Prerequisites A few things need to be checked before we start. First, we assume that you have either R or RStudio installed. Also, if not already installed, please install the following packages: c(“dplyr”,“tidyverse”,“broom”,““) 2.7 Credit This material builds from (and is directly copied from) a lot of fantastic materials developed by others in the open data science community. In particular, it pulls from the following resources, which are highly recommended for further learning and as resources later on. Specific lessons will also cite more resources. OHI data science training Modern dive "],["dataintro.html", "Chapter 3 Super quick intro to coding and data in R 3.1 Coding/programming in R 3.2 Basic terminology in R 3.3 Error messages 3.4 Coding tips and tricks 3.5 Install and load package", " Chapter 3 Super quick intro to coding and data in R 3.1 Coding/programming in R Now that you’re set up with R and RStudio, you are probably asking yourself, “OK. Now how do I use R?”. The first thing to note is that unlike other statistical software programs like Excel, SPSS, or Minitab that provide point-and-click interfaces, R is an interpreted language. This means you have to type in commands written in R code. In other words, you have to code/program in R. Note that we’ll use the terms “coding” and “programming” interchangeably throughout this course. While it is not required to be a seasoned coder/computer programmer to use R, there is still a set of basic programming concepts that new R users need to understand. Consequently, while this course is not focused on learning programming, you will still learn just enough of these basic programming concepts needed to explore and analyze data effectively. 3.2 Basic terminology in R We now introduce some basic programming concepts and terminology. Instead of asking you to memorize all these concepts and terminology right now, we’ll guide you so that you’ll “learn by doing.” To help you learn, we will always use a different font to distinguish regular text from computer_code. Also we will go through a tiny bit of information and then ask you do a similar task on your computer. On this plot you can see the overview of Rstudio. This contains the following elements: Console pane: where you enter in commands. R script: Where you store your commands often in a text file. R environment: What objects are registered/loaded in the environment (we will get back to that). Graphical output: Where you can see figures that is produced by commands in the console. This figure shows some of the more important data types in R and how they relate to storing data in R. It seems simple when set up like this, but when you are coding and you need to find an error this figure is a good place to start. Vectors can be created by using the c() function in R. The c stands for concatenate. for example the following command creates a vector of integers 1,2,3,4: my_vector &lt;- c(1,2,3,4) Matrices can be created by using the matrix() function in R. Matrices are great for doing calculations incredibly fast BUT they can only contain one type of data unlike dataframes. For example the following command creates a matrix with the same four integers 1,2,3,4: my_matrix &lt;- matrix(c(1,2,3,4)) you can also rearrange the matrix so that it has two columns instead of one: my_matrix &lt;- matrix(c(1,2,3,4),ncol=2) you can look at your matrix by typing my_matrix in the console. Data frames is a way to store data containing both strings, integers, factors together. They are rectangular spreadsheets. Typically you have a dataset where the rows correspond tot eh observations/samples and the columns correspond to the variables that describe the observations. And this is the typical format when we analyse data. We can create a data frame in R with mixed data like this: my_df &lt;- data.frame(int = c(1,2,3,4),names = c(\"Villy\",\"Søren\",\"Karl\",\"Benny\")). Conditionals: Often we subset our data using conditions, e.g. we only want samples of our data frame that has a value in column 3 that is larger than X. Do this kind of subsetting, we use conditionals. For example, using the data frame from before, we can restrict rows to those that have a integer value larger than 2 like this: my_df[my_df$int &gt; 2,] This will capture the last two rows of the data. Notice the comma, which is essential when indexing dataframes: everything before the comma is subsetting on rows while after the comma is for subsetting columns. We can also subset using equality using == (and NOT =, which is used for assignment). Here is an example using equality: my_df[my_df$names == \"Karl\",]. The final example of something similar to but not identical is a binary operator %in% which is not listed in the figure above but still very useful. This weirdly looking %in% is describing a operator (which we will get back to and use later) which can search for overlaps e.g. in R: my_df[my_df$names %in% c(\"Karl\",\"Villy\"),] See here that we find the overlap between names in my_df and the provided vector and only showing the rows of the data frame where there is an overlap. Functions, also called commands: Functions perform tasks in R. They take in inputs called arguments and return outputs. You can either manually specify a function’s arguments or use the function’s default values. For example, the function seq() in R generates a sequence of numbers. If you just run seq() it will return the value 1. That doesn’t seem very useful! This is because the default arguments are set as seq(from = 1, to = 1). Thus, if you don’t pass in different values for from and to to change this behavior, R just assumes all you want is the number 1. You can change the argument values by updating the values after the = sign. If we try out seq(from = 2, to = 5) we get the result 2 3 4 5 that we might expect. This list is by no means an exhaustive list of all the programming concepts and terminology needed to become a savvy R user; such a list would be so large it wouldn’t be very useful, especially for novices. Rather, we feel this is a minimally viable list of programming concepts and terminology you need to know before getting started. We feel that you can learn the rest as you go. Remember that your mastery of all of these concepts and terminology will build as you practice more and more. 3.2.1 Your turn Exercise 1. Create a dataframe with the following information (you pick the dataframe name): two column dataframe. One with the names: c(\"Villy\",\"Søren\",\"Karl\",\"Benny\",\"Siri\") and One with the following grades:c(100,20,40,30,60). Use the mean() function to calculate the mean for passing grades (&gt;30). There are many ways to do this but a hint is that we only need to run one command. you can always see more information about the function by writing ?mean in your console. 3.3 Error messages One thing that intimidates new R and RStudio users is how it reports errors, warnings, and messages. R reports errors, warnings, and messages in a glaring red font, which makes it seem like it is scolding you. However, seeing red text in the console is not always bad. R will show red text in the console pane in three different situations: If the text starts with “Error”, figure out what’s causing it. Think of errors as a red traffic light: something is wrong! If the text starts with “Warning”, figure out if it’s something to worry about. For instance, if you get a warning about missing values in a scatterplot and you know there are missing values, you’re fine. If that’s surprising, look at your data and see what’s missing. Think of warnings as a yellow traffic light: everything is working fine, but watch out/pay attention. Otherwise, the text is just a message. Read it, wave back at R, and thank it for talking to you. Think of messages as a green traffic light: everything is working fine and keep on going! 3.4 Coding tips and tricks Learning to code/program is quite similar to learning a foreign language. It can be daunting and frustrating at first. Such frustrations are common and it is normal to feel discouraged as you learn. However, just as with learning a foreign language, if you put in the effort and are not afraid to make mistakes, anybody can learn and improve. Here are a few useful tips to keep in mind as you learn to program: Remember that computers are not actually that smart: You may think your computer or smartphone is “smart,” but really people spent a lot of time and energy designing them to appear “smart.” In reality, you have to tell a computer everything it needs to do. Furthermore, the instructions you give your computer can’t have any mistakes in them, nor can they be ambiguous in any way. Take the “copy, paste, and tweak” approach: Especially when you learn your first programming language or you need to understand particularly complicated code, it is often much easier to take existing code that you know works and modify it to suit your ends. This is as opposed to trying to type out the code from scratch. We call this the “copy, paste, and tweak” approach. So early on, we suggest not trying to write code from memory, but rather take existing examples we have provided you, then copy, paste, and tweak them to suit your goals. After you start feeling more confident, you can slowly move away from this approach and write code from scratch. Think of the “copy, paste, and tweak” approach as training wheels for a child learning to ride a bike. After getting comfortable, they won’t need them anymore. The best way to learn to code is by doing: Rather than learning to code for its own sake, we find that learning to code goes much smoother when you have a goal in mind or when you are working on a particular project, like analyzing data that you are interested in and that is important to you. Practice is key! 3.5 Install and load package So we alluded to that the environment contains many objects and some of these objects come from packages. Packages in R is precalculated functions and useful tools to work with your data. Therefore, embrace packages and get familiar with some of them. Some of the more important ones we will use in this course are: tidyverse and dplyr for data massaging and wrangling and ggplot 2 for visualizations. So R is like a new mobile phone: while it has a certain amount of features when you use it for the first time, it doesn’t have everything. R packages are like the apps you can download onto your phone from Apple’s App Store or Android’s Google Play. Like an app on your smartphone, you need to install it first and the open it. if you try to load a package that is not installed you get an error for instance library(tidyverse) and if not you know that tidyverse is installed To install the tidyverse package do the following: install.packages(\"tidyverse\") and to load it subsequently, write library(tidyverse). Now install broom , tidyverse and dplyr using this approach "],["datawrangling.html", "Chapter 4 Data wrangling and tidy data 4.1 Packages required 4.2 Using functions of the penguins dataset 4.3 Load in a dataset from the internet 4.4 Data types in R", " Chapter 4 Data wrangling and tidy data 4.1 Packages required The following packages are required. If you need to go back and check how installing a package is done see the section 3.5(#installpackages). library(dplyr). library(ggplot2). library(readr). library(tidyr). library(broom). library(palmerpenguins). This chapter will introduce you to data wrangling with an emphasis on the dplyr package along with other helpful functions. You will see how powerful wrangling can be and how it can be like a magic wand to transform data into your specific needs. The key functions include but are not limited to: The overarching function which makes us able to combine functions and subsetting is the pipe. And what is a pipe? Pipes are a neat way to tie together several dataframes/functions into a chain of actions. It makes coding easier to understand and is therefore a better style of coding. It looks like this %&gt;%. For instance taking the mean of the first two rows of the my_df dataframe can be done like so: my_df[1:2,\"Grades\"] %&gt;% mean. Learning to use the pipe to your advantage is learning to code. Luckily it all comes naturally when working with the following functions: 1.left_join() merge two data frames together using a key column. This function (along with its cousin functions right_join() and join() etc.) is the bread and butter of working with many data types that needs to be merged and analysed. mutate() construct/reconstruct a column using a newly defined column name. This function is useful to generate a new columns that modify existing ones often using a conditional to do so. count() counts the n of each unique value in a column. Usefull to combine with mutate to see the counts of the newly constructed column. arrange() reorder the rows of a dataframe. For example, sort the rows of a dataset in descending order of the column height. filter() the rows of a dataframe based on a filter, e.g. thresholds. It is similar to the example shown in the introduction, where we used old school filtering on my_df dataframe my_df[my_df$names %in% c(\"Karl\",\"Villy\"),]. Using the filter function and pipes you can do it like this: my_df %&gt;% filter(names %in% c(\"Karl\",\"Villy\")). summarise() a dataframe using one or more of its columns/variables with a summary statistic. Such examples could be the median or the mean and an example look like this: my_df %&gt;% summarise(mean = mean(Grades)). This function can be very powerful when combined with the group_by function. group_by() is a dplyr way of grouping rows, it is a way to assign different rows to a group and do statistical reporting on every specific group in the data set. An example require us to add a third column to my_df like this: my_df &lt;- my_df %&gt;% mutate(gender = c(\"boy\",\"boy\",\"boy\",\"boy\",\"girl\")). Now using this new my_df we can group_by on the gender column and calculate the median on this group: my_df %&gt;% group_by(gender) %&gt;% summarise(median(Grades)) ## # A tibble: 2 × 2 ## gender `median(Grades)` ## &lt;chr&gt; &lt;dbl&gt; ## 1 boy 35 ## 2 girl 60 4.2 Using functions of the penguins dataset 4.3 Load in a dataset from the internet Open this link in a new tab by copy-pasting and save it to your computer using right-click (https://raw.githubusercontent.com/zief0002/miniature-garbanzo/main/data/gapminder.csv). Save it as “gapminder2017”. 4.3.1 comma separated (csv) try read it in using read csv, the file ending is automatically put on there, so even though you did not name it gapminder2017.csv, that is the name it will get. gapminder2017 &lt;-read.csv(&quot;~/241023_phdcourse/data/gapminder2017.csv&quot;) 4.3.2 table (can be anything that has table structure) read.table library(gapminder) now load this dataset which has all the years, install it if you havent already 4.4 Data types in R Even though data types is a dull subject and therefore very hard to teach properly. It does serve an important purpose. Namely that you can figure out where error messages come from and which tools to use on which data Now lets show an example of this: my_df[seq(1,3),] "]]
