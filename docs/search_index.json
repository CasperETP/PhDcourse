[["index.html", "The data-wrangling and omics course for R novices Chapter 1 Welcome to this course", " The data-wrangling and omics course for R novices Casper-Emil Tingskov Pedersen and Jonathan Thorsen 2023-10-27 Chapter 1 Welcome to this course This course will introduce you to data-wrangling and analysis of omics data. We start out by building an intuition for working with data in R/Rstudio and then plot our results. The best way to learn is to follow along with your own laptop, but all are welcome. The idea with this course is also that you can do your own selv-paced learning by going back to themes that are harder. We’ll spend half the time with the lectures on the basic of R and data wrangling and half the time for you to try out wrangling yourself. You can also try some of the things you learn from the exercises on your own data. Before you begin, be sure you are all set up: see the prerequisites in #overview. Breakdown for the course: Course schedule: Time Day1 Day2 9-10:30 Data-Wrangling, an introduction Modelling introduction and omics 10:35-12 Get your hands dirty with data-wrangling Your own catwalk with omics 13-14.30 GGplot2, an introduction Machine learning introduction 14.35-16 Plotting visually please plots Omics and machine learning This work is licensed under a Creative Commons Attribution 4.0 International License. "],["overview.html", "Chapter 2 Course overview 2.1 What can you expect 2.2 General learning outcomes 2.3 Our workflow plus the Tidy data workflow 2.4 Working with data that is not your own 2.5 Goals of this course 2.6 Prerequisites 2.7 Credit", " Chapter 2 Course overview Yihaa you are commited to learning relevant coding using R. The world is now ready to become your oister. 2.1 What can you expect In this course you will learn how to code in R and it will be fun. You will learn efficient code and workflows that can be used in your own research and for various kinds of data, including all types of omics data. This is really powerful and will lead you to become a better scientist. 2.2 General learning outcomes -how to code in R. -how to THINK about data. -how to think about data separately from your research questions. -how and why to tidy data and analyze tidy data. -how to increase efficiency in your research. 2.3 Our workflow plus the Tidy data workflow We will turning our data tidy and how to use a tidyverse suite of tools to work with tidy data. It has been developed by Hadley Wickham and his team, please visit his website if you are interested in learning more. We will be focusing on a combination of tools: Basic tools: -str/glimpse: Look at data Tidytools: -Tidy: tidyr to organize rows of data into unique values. -Transform: dplyr to manipulate/wrangle data based on subsetting by rows or columns, sorting and joining. -Visualize: ggplot2 static plots, using grammar of graphics principles This is essential - Instead of building your analyses around the format your data are in, take deliberate steps to make your data tidy. When your data are tidy, you can use a growing suite of powerful analytical and visualization tools instead of inventing home-grown ways to accommodate your data. This will save you time since you aren’t reinventing the wheel, and will make your work more clear and understandable to your collaborators (most importantly, Future You). 2.4 Working with data that is not your own One of the most important things you will learn is how to think about data separately from your own research context. Said in another way, you’ll learn to distinguish your data questions from your research questions. Here, we are focusing on data questions, and we will use data that is not specific to your research. We will be using several different data sets throughout this training, and will help you see the patterns and parallels to your own data, which will ultimately help you in your research. 2.5 Goals of this course The goal of this course today is to equip you with the tools to take a (your) dataset and do the following: Import data to R and understand the structure of your data Look at it using summaries and descriptive statistics Engineer features relevant for your research Impute missing data To do transformation and understand what that means Plot the data using visually appealing and publish-ready figures 2.6 Prerequisites A few things need to be checked before we start. First, we assume that you have either R or RStudio installed. Also, if not already installed, please install the following packages: c(“dplyr”,“tidyverse”,“broom”,““) 2.7 Credit This material builds from (and is directly copied from) a lot of fantastic materials developed by others in the open data science community. In particular, it pulls from the following resources, which are highly recommended for further learning and as resources later on. Specific lessons will also cite more resources. OHI data science training Modern dive "],["dataintro.html", "Chapter 3 Super quick intro to data in R 3.1 Install and load package 3.2 Load in a dataset 3.3 Data types in R", " Chapter 3 Super quick intro to data in R 3.1 Install and load package library(tidyverse) library(broom) try using packages… 3.2 Load in a dataset Open this link in a new tab by copy-pasting and save it to your computer using right-click (https://raw.githubusercontent.com/zief0002/miniature-garbanzo/main/data/gapminder.csv). Save it as “gapminder2017”. 3.2.1 comma separated (csv) try read it in using read csv, the file ending is automatically put on there, so even though you did not name it gapminder2017.csv, that is the name it will get. gapminder2017 &lt;-read.csv(&quot;~/241023_phdcourse/data/gapminder2017.csv&quot;) 3.2.2 table (can be anything that has table structure) read.table library(gapminder) now load this dataset which has all the years, install it if you havent already 3.3 Data types in R Even though data types is a dull subject and therefore very hard to teach properly. It does serve an important purpose. Namely that you can figure out where error messages come from and which tools to use on which data 3.3.1 variable naming my_variable &lt;- 42 this_function_does_great_stuff &lt;- function() {} my_source_code_file_name &lt;- “do_great_stuff.R” my_data_set_file_name &lt;- “my_data_set.RData” "],["r-is-a-functional-programming-language-embrace-copy-on-modify-semantics.html", "Chapter 4 R is a functional programming language, embrace copy on modify semantics", " Chapter 4 R is a functional programming language, embrace copy on modify semantics x &lt;- 3 x &lt;- x + 3 # Right side is evaluated and copied. X is not modified 4.0.1 R has the S4 object system, but this is not a true part of the R semantics. 4.0.2 Functions may input several variables (parameters), may return one variable my_adder_function &lt;- function(parameter_1, parameter_2) { return (parameter_1+parameter_2) } 4.0.3 All operators are functions 3 + 3 +(3,3) 4.0.4 Note how backticks `` is used for variable names that start with restricted characters - this goes for column names as well "],["under-the-hood-c-all-r-variables-are-vectors-arrays-or-lists.html", "Chapter 5 Under the hood (C), all R-variables are vectors, arrays or lists 5.1 Data types in R 5.2 Data types in R 5.3 Data types in R 5.4 R Markdown 5.5 Including Plots", " Chapter 5 Under the hood (C), all R-variables are vectors, arrays or lists x &lt;- 3 # Numeric vector y &lt;- c(“monday”, “tuesday”) # Character vector z &lt;- list( “numbers”=c(1,3,4), “days”=y ) # List (a vector of pointers to other vectors) head(iris) # Data frame: a list, with pointers to each column (and with some restrictions, e.g. type, length) 5.0.1 Dataframe inspection 5.1 Data types in R 5.2 Data types in R 5.3 Data types in R 5.4 R Markdown This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.rstudio.com. When you click the Knit button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this: summary(cars) ## speed dist ## Min. : 4.0 Min. : 2.00 ## 1st Qu.:12.0 1st Qu.: 26.00 ## Median :15.0 Median : 36.00 ## Mean :15.4 Mean : 42.98 ## 3rd Qu.:19.0 3rd Qu.: 56.00 ## Max. :25.0 Max. :120.00 5.5 Including Plots You can also embed plots, for example: Note that the echo = FALSE parameter was added to the code chunk to prevent printing of the R code that generated the plot. "],["dataimport.html", "Chapter 6 Data importing and tidy data 6.1 Get “bookdown-tutorial” going on your local computer 6.2 Create your “awesome-book” GitHub repo 6.3 Turn “bookdown-tutorial” into “awesome-book” 6.4 Publish “awesome-book” 6.5 Moving forward", " Chapter 6 Data importing and tidy data The bookdown package and book is definitely the best way to get started. However, in practice I always find myself copying an existing, working book and modifying it instead of starting from scratch. So this tutorial is going to have you do that as well, using this book as the one you copy from. [more setup here] You will have to name your book’s repository. To differentiate your book’s repo name from this “bookdown-tutorial” repo, here we’ll call your book “awesome-book” but you should consistently name it what you want to name it. 6.1 Get “bookdown-tutorial” going on your local computer Go to https://github.com/jules32/bookdown-tutorial Click the green “clone or download” button and DOWNLOAD ZIP. Locally on your computer, unzip the folder, save it in a reasonable place Rename 2 things from “bookdown-tutorial” to “awesome-book”. You can do this in the finder/windows explorer: the folder itself (that you just unzipped) the .Rproj file Double-click the .Rproj file to launch RStudio Install packages and restart install.packages(\"bookdown\") install.packages(\"usethis\") Use the menu item Session &gt; Restart R Click on the Build tab in the top right pane Click on Build Book! Nice job! Now let’s make it yours, and connect it to GitHub. 6.2 Create your “awesome-book” GitHub repo Go to your GitHub account: github.com/username Click on Repositories, and the green button “New” to create a new repo Name this new repo “awesome-book” DO NOT initialize this repo with a README Click the green “create repository” button — this will take you to your new repo Click the tiny “clone or download” button near the top and COPY URL 6.3 Turn “bookdown-tutorial” into “awesome-book” The following is from Jenny Bryan’s Happy Git With R Go back to RStudio, to your “awesome-book” project In the Console, type usethis::use_git() and say Yes to the two prompts. This will restart R and give you a new Git tab in the upper right pane. Now, click on the Terminal tab next to the Console tab. Type git remote add origin &lt;paste your copied awesome-book github url here&gt; Type git push --set-upstream origin master 6.4 Publish “awesome-book” Last steps! Go back to github.com/username/“awesome-book” and refresh — our files should be there! But we want it to be a book published as https://username.github.io/awesome-book. Click Settings Scroll down to GitHub Settings Change the Source pulldown from “None” to “master branch /docs folder” It should say “Your site is ready to be published at https://username.github.io/awesome-book/” — click the link to see! Now, you’re set — you just need to write your book. 6.5 Moving forward As you write your .Rmd files, build the book and commit all files, including the docs/ folder, and your published book will be updated! "]]
